#+TITLE:How to write ~makefiles~
#+OPTIONS: toc:nil
#+HTML_HEAD: <style> body{margin:5% 15%}</style>
* [[./GNU%20make.html][Make Documentation]]
+ need to add TAB before command not SPACES
+ main goal is first target
  + checks its dependencies
+ continuing multiple lines
  + leave a \ at the end
+ single ('$') for dereferencig variabes
+ double ('$$') for passing single ('$') to shell
+ proper practices for cleaning to handle unanticipated situations
#+BEGIN_SRC 
.PHONY : clean
clean :
        -rm edit $(objects)
#+END_SRC
+ = vs :=
  + = supports recursive assign
  + := literal assign (one time only)
+ [[./GNU%20make.html#Automatic-VariablesAutomatic][Automatic Variables]]
| $@ | target                              |
| $< | first prerequisite                  |
| $? | all prerequisites newer than target |
| $^ | all prerequisites                   |
* [[http://mrbook.org/blog/tutorials/make/][Online Tutorial]]
** Makefile 
*** Source code compiling utility
+ ~make~ utility needed
+ manage multiple source code project
+ automatically build and compile updated code only
*** Make utility
#+BEGIN_SRC
make
#+END_SRC
+ executes file named /makefile/ in current directory
#+BEGIN_SRC
make -f MyMakeFile
#+END_SRC
+ executes specific makefile out of many makefiles
#+BEGIN_SRC
man make
#+END_SRC
+ more info on other switches
*** Build Process
1. compiler compiles source files to object files
2. linker links object files to new executable
** Example =./project/=
*** Compiling by hand
#+BEGIN_SRC 
g++ main.cpp hello.cpp factorial.cpp -o hello
#+END_SRC
*** Basic makefile structure
#+BEGIN_SRC
target: dependencies
[tab] system command
#+END_SRC
*** Simple file =Makefile-1=
#+BEGIN_SRC
all:
    g++ main hello.cpp factorial.cpp -o hello
#+END_SRC
How to run:
#+BEGIN_SRC
make -f Makefile-1
#+END_SRC
+ =all:= is the default target if no other target exists
+ no dependencies in this case
+ compiles program according to the command line after target
*** Nested Dependencies =Makefile-2=
#+BEGIN_SRC
all: hello

hello: main.o factorial.o hello.o
    g++ main.o factorial.o hello.o -o hello

main.o: main.cpp
    g++ -c main.cpp

factorial.o: factorial.cpp
    g++ -c factorial.cpp

hello.o: hello.cpp
    g++ -c hello.cpp

clean:
    rm *o hello
#+END_SRC
+ using dependencies
  + only sections where dependency is changed gets re-compiled
  + nested dependency tree
+ *NOTE:* clean seemed to fail if ~hello~ was included
*** Variables =Makefile-3=
#+BEGIN_SRC
# I am a comment, and I want to say that the variable CC will be
# the compiler to use.
CC=g++
# Hey!, I am comment number 2. I want to say that CFLAGS will be the
# options I'll pass to the compiler.
CFLAGS=-c -Wall

all: hello

hello: main.o factorial.o hello.o
    $(CC) main.o factorial.o hello.o -o hello

main.o: main.cpp
    $(CC) $(CFLAGS) main.cpp

factorial.o: factorial.cpp
    $(CC) $(CFLAGS) factorial.cpp

hello.o: hello.cpp
    $(CC) $(CFLAGS) hello.cpp

clean:
    rm *o
#+END_SRC
+ assign a value to a variable
+ use derefence operator to retreive value ~$(VAR)~
*** More features =Makefile-4=
#+BEGIN_SRC
CC=g++
CFLAGS=-c -Wall
LDFLAGS=
SOURCES=main.cpp hello.cpp factorial.cpp
OBJECTS=$(SOURCES:.cpp=.o)
EXECUTABLE=hello

all: $(SOURCES) $(EXECUTABLE)
    
$(EXECUTABLE): $(OBJECTS) 
    $(CC) $(LDFLAGS) $(OBJECTS) -o $@

.cpp.o:
    $(CC) $(CFLAGS) $< -o $@
#+END_SRC
+ switching file type for variables
  + =$(SOURCES:.cpp=.o)=
+ referencing the first prerequisite
  + =$<=
+ referencing all prerequsites
  + =$^$
+ referencing the target
  + =$@=
